{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"How to run 'any' Tool This guide describes the quick and easy set up almost any software tool on your system. To use space efficiently, the tools can easily be removed once analysis is complete. Set up does not require installing additional dependencies and can be completed in a matter of minutes. Containers are portable and reproducible; they allow the packaging of software and their associated environments (OS, libraries, tools, etc .) within an encapsulated file that can be executed on diverse systems without the need to explicitly port or integrate with the OS, libraries, or environment specific to the host system. Container repositories such as Sylabs.io Container Library , Docker Hub , Singularity Hub and GitHub provide thousands of pre-built Container Images. This guide tells you how to: transfer a container image on your system, run the software tool(s) inside that container and remove container images that are no longer required. Full instructions can be found in the Apptainer User Documentation .","title":"Introduction"},{"location":"index.html#how-to-run-any-tool","text":"This guide describes the quick and easy set up almost any software tool on your system. To use space efficiently, the tools can easily be removed once analysis is complete. Set up does not require installing additional dependencies and can be completed in a matter of minutes. Containers are portable and reproducible; they allow the packaging of software and their associated environments (OS, libraries, tools, etc .) within an encapsulated file that can be executed on diverse systems without the need to explicitly port or integrate with the OS, libraries, or environment specific to the host system. Container repositories such as Sylabs.io Container Library , Docker Hub , Singularity Hub and GitHub provide thousands of pre-built Container Images. This guide tells you how to: transfer a container image on your system, run the software tool(s) inside that container and remove container images that are no longer required. Full instructions can be found in the Apptainer User Documentation .","title":"How to run 'any' Tool"},{"location":"access.html","text":"Logging in Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder. Opening a stable connection (recommended) You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Accessing the server"},{"location":"access.html#logging-in","text":"Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder.","title":"Logging in"},{"location":"access.html#opening-a-stable-connection-recommended","text":"You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Opening a stable connection (recommended)"},{"location":"clear.html","text":"Removing Container Images To maintain your system it is good practice remove container images that are no longer needed. For example, the lolcow container image ( lolcow_latest.sif ) occupies 84 Mb of system space. To delete an image use: rm CONTAINER_NAME.sif If needed in the future it can easier be pulled again. You can also clean your system cache ( ~/.singularity/cache/ ) using: singularity cache clean To list Singularity container images use: singularity cache list -v","title":"Removing old Tools"},{"location":"clear.html#removing-container-images","text":"To maintain your system it is good practice remove container images that are no longer needed. For example, the lolcow container image ( lolcow_latest.sif ) occupies 84 Mb of system space. To delete an image use: rm CONTAINER_NAME.sif If needed in the future it can easier be pulled again. You can also clean your system cache ( ~/.singularity/cache/ ) using: singularity cache clean To list Singularity container images use: singularity cache list -v","title":"Removing Container Images"},{"location":"fetch.html","text":"Pulling a Container Image to your System There are two main Container Platforms: Singularity (soon to be known as Apptainer) and Docker . Singularity has the advantage that it can run both Singularity and Docker containers. This guide describes using the Singularity Platform. Image Registries The first thing you need to do is choose the a container. Biocontainers and StaphB are both a good source of up-to-date and reliable container images for genomic analysis. Container Images can also be found in: Sylabs.io Container Library Docker Hub Singularity Hub (no longer updated) GitHub For example: You can choose the version of the software tool; in the tab named 'tags' the different versions are listed. The Command To transfer a container image to your system using a URL use: singularity pull SOURCE://PATH:TAG Substitute: SOURCE for library , sylabsed , shub or docker PATH for the filepath to the container image and TAG for the version, e.g. latest , or 2.4.5 . The tag is optional. Use ls to check the image has been downloaded. Singularity images are stored as a .sif file. If a Docker image is pulled, it will be converted to a Singularity image. Examples To pull a container image called lolcow from the sylabs registry: singularity pull library://sylabsed/examples/lolcow To pull a Docker container image with abricate version 1.0.0 from Docker Hub and convert to a Singularity container image: singularity pull docker://staphb/abricate:1.0.0 To pull a Docker container image with the latest version of the assembly tool, shovill, from quay.io, and convert to a Singularity container image: singularity pull docker://quay.io/staphb/shovill:latest","title":"Setting up a new Tool"},{"location":"fetch.html#pulling-a-container-image-to-your-system","text":"There are two main Container Platforms: Singularity (soon to be known as Apptainer) and Docker . Singularity has the advantage that it can run both Singularity and Docker containers. This guide describes using the Singularity Platform.","title":"Pulling a Container Image to your System"},{"location":"fetch.html#image-registries","text":"The first thing you need to do is choose the a container. Biocontainers and StaphB are both a good source of up-to-date and reliable container images for genomic analysis. Container Images can also be found in: Sylabs.io Container Library Docker Hub Singularity Hub (no longer updated) GitHub For example: You can choose the version of the software tool; in the tab named 'tags' the different versions are listed.","title":"Image Registries"},{"location":"fetch.html#the-command","text":"To transfer a container image to your system using a URL use: singularity pull SOURCE://PATH:TAG Substitute: SOURCE for library , sylabsed , shub or docker PATH for the filepath to the container image and TAG for the version, e.g. latest , or 2.4.5 . The tag is optional. Use ls to check the image has been downloaded. Singularity images are stored as a .sif file. If a Docker image is pulled, it will be converted to a Singularity image. Examples To pull a container image called lolcow from the sylabs registry: singularity pull library://sylabsed/examples/lolcow To pull a Docker container image with abricate version 1.0.0 from Docker Hub and convert to a Singularity container image: singularity pull docker://staphb/abricate:1.0.0 To pull a Docker container image with the latest version of the assembly tool, shovill, from quay.io, and convert to a Singularity container image: singularity pull docker://quay.io/staphb/shovill:latest","title":"The Command"},{"location":"inside.html","text":"Working inside a container Rather than submitting commands from outside the container, alternatively you can work inside a container. This allows you to submit multiple commands one after another without the building and collapsing the container multiple times. To make and enter a container, use: singularity shell CONTAINER_NAME.sif Substitute CONTAINER_NAME for the name of the container you wish to use. Tip Singularity links your entire HOME directory to the Singularity container. You can use ls to view the file system. While working inside a container you can make new subdirectories ( mkdir ) to organise your outputs. These will persist after exiting the container. To exit the container shell use the exit command. This will collapse the container. Examples To run build and enter a container named lolcow use: singularity shell lolcow_latest.sif You can now enter commands, for example: cowsay -h cowsay moo moo cowthink -Tww Boo! This is how the terminal will appear: singularity shell lolcow_latest.sif to make and enter the container, Once inside the container the command prompt changes to Singularity> , the command cowsay Boo! prints a cow saying 'Boo!', exit is used to exit and collapse the container, and the regular command prompt reappears .../RunAnyTool$ .","title":"Method 2"},{"location":"inside.html#working-inside-a-container","text":"Rather than submitting commands from outside the container, alternatively you can work inside a container. This allows you to submit multiple commands one after another without the building and collapsing the container multiple times. To make and enter a container, use: singularity shell CONTAINER_NAME.sif Substitute CONTAINER_NAME for the name of the container you wish to use. Tip Singularity links your entire HOME directory to the Singularity container. You can use ls to view the file system. While working inside a container you can make new subdirectories ( mkdir ) to organise your outputs. These will persist after exiting the container. To exit the container shell use the exit command. This will collapse the container. Examples To run build and enter a container named lolcow use: singularity shell lolcow_latest.sif You can now enter commands, for example: cowsay -h cowsay moo moo cowthink -Tww Boo! This is how the terminal will appear: singularity shell lolcow_latest.sif to make and enter the container, Once inside the container the command prompt changes to Singularity> , the command cowsay Boo! prints a cow saying 'Boo!', exit is used to exit and collapse the container, and the regular command prompt reappears .../RunAnyTool$ .","title":"Working inside a container"},{"location":"outside.html","text":"Running software in a container Once you have transferred a container image to your system you can use the enclosed software. The following command will make a container from the image file ( .sif ), run the software, and then collapse the container. The output from the software will be save in your current directory, unless specified otherwise. singularity exec CONTAINER_NAME.sif YOUR_SCRIPT_HERE The first part of the command singularity exec CONTAINER_NAME.sif specifies information about the container; the second part of the command ( YOUR_SCRIPT_HERE ) relates to the command you want the software inside the container to execute. Substitute: CONTAINER_NAME for the name of the container you wish to use, and YOUR_SCRIPT_HERE for the full command to execute the tool. Example This exec command allows you to execute a custom command ( cowsay moo ) within a container by specifying the image file ( lolcow_latest.sif ): singularity exec lolcow_latest.sif cowsay moo The following command executes shovill --check inside a container named shovill_latest.sif . singularity exec shovill_latest.sif shovill --check Information By default, Singularity automatically connects folders outside and inside the container; this means you can easily process data saved on your system and save the results. Your outputs are not lost when the container is collapsed.","title":"Method 1"},{"location":"outside.html#running-software-in-a-container","text":"Once you have transferred a container image to your system you can use the enclosed software. The following command will make a container from the image file ( .sif ), run the software, and then collapse the container. The output from the software will be save in your current directory, unless specified otherwise. singularity exec CONTAINER_NAME.sif YOUR_SCRIPT_HERE The first part of the command singularity exec CONTAINER_NAME.sif specifies information about the container; the second part of the command ( YOUR_SCRIPT_HERE ) relates to the command you want the software inside the container to execute. Substitute: CONTAINER_NAME for the name of the container you wish to use, and YOUR_SCRIPT_HERE for the full command to execute the tool. Example This exec command allows you to execute a custom command ( cowsay moo ) within a container by specifying the image file ( lolcow_latest.sif ): singularity exec lolcow_latest.sif cowsay moo The following command executes shovill --check inside a container named shovill_latest.sif . singularity exec shovill_latest.sif shovill --check Information By default, Singularity automatically connects folders outside and inside the container; this means you can easily process data saved on your system and save the results. Your outputs are not lost when the container is collapsed.","title":"Running software in a container"},{"location":"quick.html","text":"Quick Start Container Images can be found at Biocontainers , StaphB , Sylabs.io Container Library , Docker Hub , Singularity Hub and GitHub . To transfer a container image to your system use: singularity pull SOURCE://PATH:TAG To build a container, run a software script and collapse the container use: singularity exec CONTAINER_NAME.sif YOUR_SCRIPT_HERE To build and enter a container it use: singularity shell CONTAINER_NAME.sif Once inside software commands can be run directly. Use exit . To remove container images: rm CONTAINER_NAME.sif","title":"Quick start"},{"location":"quick.html#quick-start","text":"Container Images can be found at Biocontainers , StaphB , Sylabs.io Container Library , Docker Hub , Singularity Hub and GitHub . To transfer a container image to your system use: singularity pull SOURCE://PATH:TAG To build a container, run a software script and collapse the container use: singularity exec CONTAINER_NAME.sif YOUR_SCRIPT_HERE To build and enter a container it use: singularity shell CONTAINER_NAME.sif Once inside software commands can be run directly. Use exit . To remove container images: rm CONTAINER_NAME.sif","title":"Quick Start"},{"location":"troubleshooting.html","text":"Troubleshooting These are some common remedies: It is (usually) safer to copy and paste commands To avoid spellling error use the \u2018tab\u2019 key to auto-complete Do the hyphens or inverted commas need to be re-typed? Are the spaces in the correct place? Is the command prompt in the correct directory (folder)? Is the login connection still active Is the input file named correctly? Never use {} or [] in file names. If these fail, ask for help.","title":"Troubleshooting"},{"location":"troubleshooting.html#troubleshooting","text":"These are some common remedies: It is (usually) safer to copy and paste commands To avoid spellling error use the \u2018tab\u2019 key to auto-complete Do the hyphens or inverted commas need to be re-typed? Are the spaces in the correct place? Is the command prompt in the correct directory (folder)? Is the login connection still active Is the input file named correctly? Never use {} or [] in file names. If these fail, ask for help.","title":"Troubleshooting"}]}